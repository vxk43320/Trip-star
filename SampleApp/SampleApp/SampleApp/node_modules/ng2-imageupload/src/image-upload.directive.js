"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils_1 = require("./utils");
var ImageUploadDirective = (function () {
    function ImageUploadDirective(_elementref, _renderer) {
        this._elementref = _elementref;
        this._renderer = _renderer;
        this.imageSelected = new core_1.EventEmitter();
    }
    Object.defineProperty(ImageUploadDirective.prototype, "allowedExtensions", {
        get: function () {
            return this._allowedExtensions;
        },
        set: function (allowed) {
            this._allowedExtensions = allowed && allowed.map(function (a) { return a.toLowerCase(); });
        },
        enumerable: true,
        configurable: true
    });
    ImageUploadDirective.prototype.readFiles = function (event) {
        var _this = this;
        var _loop_1 = function (file) {
            var result = {
                file: file,
                url: URL.createObjectURL(file)
            };
            var ext = file.name.split('.').pop();
            ext = ext && ext.toLowerCase();
            if (ext && this_1.allowedExtensions && this_1.allowedExtensions.length && this_1.allowedExtensions.indexOf(ext) === -1) {
                result.error = 'Extension Not Allowed';
                this_1.imageSelected.emit(result);
            }
            else {
                this_1.fileToDataURL(file, result).then(function (r) { return _this.resize(r); })
                    .then(function (r) { return _this.imageSelected.emit(r); })
                    .catch(function (e) {
                    result.error = 'Image processing error';
                    _this.imageSelected.emit(result);
                });
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = event.target.files; _i < _a.length; _i++) {
            var file = _a[_i];
            _loop_1(file);
        }
    };
    ImageUploadDirective.prototype.resize = function (result) {
        var _this = this;
        if (!this.resizeOptions)
            return Promise.resolve(result);
        return utils_1.createImage(result.url).then(function (image) {
            var dataUrl = utils_1.resizeImage(image, _this.resizeOptions);
            result.resized = {
                dataURL: dataUrl,
                type: dataUrl.match(/:(.+\/.+;)/)[1]
            };
            return result;
        });
    };
    ImageUploadDirective.prototype.fileToDataURL = function (file, result) {
        return new Promise(function (resolve) {
            var reader = new FileReader();
            reader.onload = function (e) {
                result.dataURL = reader.result;
                resolve(result);
            };
            reader.readAsDataURL(file);
        });
    };
    return ImageUploadDirective;
}());
ImageUploadDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'input[type=file][imageUpload]'
            },] },
];
ImageUploadDirective.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
    { type: core_1.Renderer, },
]; };
ImageUploadDirective.propDecorators = {
    'imageSelected': [{ type: core_1.Output },],
    'resizeOptions': [{ type: core_1.Input },],
    'allowedExtensions': [{ type: core_1.Input },],
    'readFiles': [{ type: core_1.HostListener, args: ['change', ['$event'],] },],
};
exports.ImageUploadDirective = ImageUploadDirective;
//# sourceMappingURL=image-upload.directive.js.map