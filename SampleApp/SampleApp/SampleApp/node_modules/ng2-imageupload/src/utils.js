"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createImage(url) {
    return new Promise(function (res, rej) {
        var image = new Image();
        image.onload = function () { return res(image); };
        image.onerror = rej;
        image.src = url;
    });
}
exports.createImage = createImage;
var resizeAreaId = 'imageupload-resize-area';
function getResizeArea() {
    var resizeArea = document.getElementById(resizeAreaId);
    if (!resizeArea) {
        var wrap = document.createElement('div');
        resizeArea = document.createElement('canvas');
        wrap.appendChild(resizeArea);
        wrap.id = 'wrap-' + resizeAreaId;
        wrap.style.position = 'relative';
        wrap.style.overflow = 'hidden';
        wrap.style.width = '0';
        wrap.style.height = '0';
        resizeArea.id = resizeAreaId;
        resizeArea.style.position = 'absolute';
        document.body.appendChild(wrap);
    }
    return resizeArea;
}
function resizeImage(origImage, _a) {
    var _b = _a === void 0 ? {} : _a, resizeMaxHeight = _b.resizeMaxHeight, resizeMaxWidth = _b.resizeMaxWidth, _c = _b.resizeQuality, resizeQuality = _c === void 0 ? 0.7 : _c, _d = _b.resizeType, resizeType = _d === void 0 ? 'image/jpeg' : _d;
    var canvas = getResizeArea();
    var height = origImage.height;
    var width = origImage.width;
    if (width > resizeMaxWidth) {
        height = Math.round(height * resizeMaxWidth / width);
        width = resizeMaxWidth;
    }
    if (height > resizeMaxHeight) {
        width = Math.round(width * resizeMaxHeight / height);
        height = resizeMaxHeight;
    }
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(origImage, 0, 0, width, height);
    return canvas.toDataURL(resizeType, resizeQuality);
}
exports.resizeImage = resizeImage;
//# sourceMappingURL=utils.js.map